# -*- coding: utf-8 -*-
"""find musical spiral.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fI2O-Ndc0x0nr596n3uUeZObjlEKpWie
"""

import pandas as pd
import numpy as np
!pip install datetime
import datetime as dt
!pip install --upgrade xlrd
!pip install --upgrade pandas
!pip install -- tabula-py

import pandas as pd

url = 'https://pages.mtu.edu/~suits/notefreqs.html'

# Read the HTML table into a pandas dataframe
dfs = pd.read_html(url)

# The table we want is the first one in the list of dataframes
df = dfs[0]

# Rename the columns to remove whitespace
df.columns = ['Note', 'Frequency (Hz)', 'Wavelength (cm)', 'Frequency (midi)', 'Equal Temperament Cents', 'Just Ratio', 'Cents Difference from ET', 'Error %']

# Set the 'Note' column as the index
df.set_index('Note', inplace=True)

# Convert the 'Frequency (Hz)' column to a float
df['Frequency (Hz)'] = df['Frequency (Hz)'].astype(float)

# Convert the dataframe to a dictionary
note_freqs = df['Frequency (Hz)'].to_dict()

# Read the frequency data from the table
#freq_data = pd.read_csv('notefreqs.csv')['Frequency (Hz)'].values



# -*- coding: utf-8 -*-
"""
Created on Tue Feb 28 17:17:34 2023

@author: otavi
"""

import matplotlib.pyplot as plt
import numpy as np

# Read the frequency data from the table
df = pd.read_csv('notefreqs.csv')
notes = df['Note'].tolist()
freqs = df['Frequency (Hz)'].tolist()

# Define the maximum radius of the spiral
max_radius = 10*np.pi

# Define the number of rotations for each note
rotations = [int(note[-1]) for note in notes]

# Calculate the angle for each note
angles = [2*np.pi*rot/12 for rot in rotations]

# Calculate the radial distance for each note
radii = [np.log10(f)/np.log10(2) for f in freqs]

# Create the figure and axis objects
fig, ax = plt.subplots(figsize=(8,8))

# Plot the points on the spiral
ax.scatter(angles, radii)

# Set the maximum radius of the spiral
ax.set_ylim([0, max_radius])

# Set the polar coordinate system
ax.set_theta_direction(-1)
ax.set_theta_zero_location("N")

# Set the labels for the angles
ax.set_xticks(np.linspace(0, 2*np.pi, 12, endpoint=False))
ax.set_xticklabels(['C{}'.format(i) for i in range(12)])

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

url = 'https://pages.mtu.edu/~suits/notefreqs.html'

# Read the HTML table into a pandas dataframe
dfs = pd.read_html(url)

# The table we want is the first one in the list of dataframes
df = dfs[0]

# Rename the columns to remove whitespace
df.columns = ['Note', 'Frequency (Hz)', 'Wavelength (cm)', 'Frequency (midi)', 'Equal Temperament Cents', 'Just Ratio', 'Cents Difference from ET', 'Error %']

# Set the 'Note' column as the index
df.set_index('Note', inplace=True)

# Convert the 'Frequency (Hz)' column to a float
df['Frequency (Hz)'] = df['Frequency (Hz)'].astype(float)

# Convert the dataframe to a dictionary
note_freqs = df['Frequency (Hz)'].to_dict()

# Define the radius values as the frequencies in the dictionary
radii = list(note_freqs.values())

# Define the note names as the keys in the dictionary
notes = list(note_freqs.keys())

# Define the number of notes
num_notes = len(notes)

# Create a list of angles for each note, starting with 0 for C0
angles = []
angle_Cn = 0

# create a list of notes in the order we want them to appear on the spiral
notes = ['C0', 'D0', 'E0', 'F0', 'G0', 'A0', 'B0', 'C1', 'D1', 'E1', 'F1']

# create a dictionary to map notes to their corresponding frequency
note_freqs = {'C0': 16.35, 'C#0': 17.32, 'D0': 18.35, 'D#0': 19.45, 'E0': 20.60, 'F0': 21.83, 'F#0': 23.12,
              'G0': 24.50, 'G#0': 25.96, 'A0': 27.50, 'A#0': 29.14, 'B0': 30.87, 'C1': 32.70, 'C#1': 34.65,
              'D1': 36.71, 'D#1': 38.89, 'E1': 41.20, 'F1': 43.65}

# create a figure and axis
fig, ax = plt.subplots()

# set the x and y limits of the axis to fit all the notes
ax.set_xlim([-1.1*max(note_freqs.values()), 1.1*max(note_freqs.values())])
ax.set_ylim([-1.1*max(note_freqs.values()), 1.1*max(note_freqs.values())])

# create a list to hold the x and y coordinates of each point on the spiral
x_coords = []
y_coords = []

for note in notes:
    if note[0] == 'C':
        angle_Cn = int(note[1]) * 2 * np.pi
    note_angle = angle_Cn + (np.log2(note_freqs[note]/radii[0]) * np.pi)
    angles.append(note_angle)

# Create a polar plot of the notes
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.set_theta_zero_location("N")
ax.set_theta_direction(-1)
ax.set_rlim(0, max(radii))
ax.plot(angles, radii, linestyle='', marker='o', markersize=5)
ax.set_title('Harmonic Space Spiral')
ax.set_xlabel('Angle (radians)')
ax.set_ylabel('Frequency (Hz)')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import math
# Read note frequencies from the dictionary
note_freqs = {'C0': 16.35, 'C#0': 17.32, 'D0': 18.35, 'D#0': 19.45, 'E0': 20.6, 'F0': 21.83, 'F#0': 23.12, 'G0': 24.5, 'G#0': 25.96, 'A0': 27.5, 'A#0': 29.14, 'B0': 30.87, 'C1': 32.7}
pi=math.pi
# Create a list of note names and corresponding frequencies
notes = list(note_freqs.keys())
freqs = list(note_freqs.values())

# Create a polar axis
ax = plt.subplot(111, projection='polar')
ax.set_theta_zero_location("N")

# Set the radius limits based on the min and max frequencies
rmin = min(freqs)
rmax = max(freqs)
ax.set_rlim(rmin - 10, rmax + 10)

# Plot each note as a point on the spiral
for note in notes:
    # Extract the note name and number separately
    note_name = note[0]
    note_number_str = note[1:].replace('#', '').replace('b', '')

    # Convert the note number to an integer
    n = int(note_number_str)

    # Calculate the angle and radius for the current note
    angle = (n / 12) * 2 * pi
    radius = note_freqs[note_name]

    # Convert the polar coordinates to Cartesian coordinates
    x = radius * cos(angle)
    y = radius * sin(angle)

    # Add the point to the plot
    plt.scatter(x, y)
for i in range(len(notes)):
    note = notes[i]
    freq = freqs[i]
    n = int(note[1])  # extract the note number from the note name
    theta = 2 * np.pi * n  # calculate the angle for the note
    ax.plot(theta, freq, 'bo', markersize=8)

plt.show()



# -*- coding: utf-8 -*-
"""
Created on Tue Feb 28 18:58:20 2023

@author: otavi
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import pandas as pd

pi = math.pi

# Read note frequencies from the dictionary
url = 'https://pages.mtu.edu/~suits/notefreqs.html'

# Read the HTML table into a pandas dataframe
dfs = pd.read_html(url)

# The table we want is the second one in the list of dataframes
df = dfs[1]

# Rename the columns to remove whitespace
df.columns = ["Note", "Frequency (Hz)", "Wavelenght"]

# Set the 'Note' column as the index
df.set_index('Note', inplace=True)

# Convert the 'Frequency (Hz)' column to a float
df['Frequency (Hz)'] = df['Frequency (Hz)'].astype(float)

# Convert the dataframe to a dictionary
note_freqs = df['Frequency (Hz)'].to_dict()

# Create a list of note names and corresponding frequencies
notes = list(note_freqs.keys())
freqs = list(note_freqs.values())

# This function takes in the name of a note and the list of frequencies,
# and returns the angle in radians and the radius for that note.
def get_angle(note_name, freqs):
    # Get the index of the note in the list of notes
    note_index = notes.index(note_name)

    # Find the index of the previous C note
    prev_c_index = note_index - note_index % 12

    # Find the angle of the previous C note
    prev_c_angle = prev_c_index / 12 * 2 * pi

    # Find the frequency of the note
    freq = freqs[note_index]

    # Calculate the radius of the note in the spiral
    radius = freq

    # Calculate the angle of the note relative to the previous C note
    note_angle = (note_index - prev_c_index) / 12 * 2 * pi

    # Calculate the total angle of the note in the spiral
    angle = prev_c_angle + note_angle

    return angle, radius


# this function to create a list of angles and radii for all
# the notes in the table:
angles = []
radii = []
for note in notes:
    angle, radius = get_angle(note, freqs)
    angles.append(angle)
    radii.append(radius)

# Create a polar plot of the notes in the spiral
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, polar=True)
ax.scatter(angles, radii, s=10)
ax.set_title('Harmonic Space Spiral')
ax.set_xlabel('Angle (radians)')
ax.set_ylabel('Frequency (Hz)')

# Enable zooming
plt.gcf().canvas.mpl_connect('scroll_event', lambda event: ax.set_ylim(ax.get_ylim()[0] - event.step * 100, ax.get_ylim()[1] + event.step * 100))

plt.show()